/*
Deployment script for PortalDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PortalDB"
:setvar DefaultFilePrefix "PortalDB"
:setvar DefaultDataPath "C:\Users\tony_\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\tony_\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Bins]...';


GO
CREATE TABLE [dbo].[Bins] (
    [BinID]   INT           IDENTITY (1, 1) NOT NULL,
    [BinName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([BinID] ASC),
    UNIQUE NONCLUSTERED ([BinName] ASC)
);


GO
PRINT N'Creating [dbo].[OrderLines]...';


GO
CREATE TABLE [dbo].[OrderLines] (
    [OrderLineID] INT   IDENTITY (1, 1) NOT NULL,
    [OrderID]     INT   NOT NULL,
    [PartID]      INT   NOT NULL,
    [QTY]         INT   NOT NULL,
    [Price]       MONEY NULL,
    PRIMARY KEY CLUSTERED ([OrderLineID] ASC)
);


GO
PRINT N'Creating [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [OrderID]         INT            IDENTITY (1, 1) NOT NULL,
    [OrderNumber]     NVARCHAR (50)  NOT NULL,
    [DateOrdered]     DATETIME2 (7)  NOT NULL,
    [CustomerName]    NVARCHAR (100) NOT NULL,
    [CustomerAddress] NVARCHAR (250) NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderID] ASC),
    UNIQUE NONCLUSTERED ([OrderNumber] ASC)
);


GO
PRINT N'Creating [dbo].[PartInventory]...';


GO
CREATE TABLE [dbo].[PartInventory] (
    [InventoryID] INT IDENTITY (1, 1) NOT NULL,
    [PartID]      INT NOT NULL,
    [BinID]       INT NOT NULL,
    [QTY]         INT NOT NULL,
    PRIMARY KEY CLUSTERED ([InventoryID] ASC)
);


GO
PRINT N'Creating [dbo].[Parts]...';


GO
CREATE TABLE [dbo].[Parts] (
    [PartID]          INT            IDENTITY (1, 1) NOT NULL,
    [PartName]        NVARCHAR (50)  NOT NULL,
    [PartDescription] NVARCHAR (100) NOT NULL,
    [Price]           MONEY          NULL,
    PRIMARY KEY CLUSTERED ([PartID] ASC),
    UNIQUE NONCLUSTERED ([PartName] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[OrderLines]...';


GO
ALTER TABLE [dbo].[OrderLines]
    ADD FOREIGN KEY ([OrderID]) REFERENCES [dbo].[Orders] ([OrderID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[OrderLines]...';


GO
ALTER TABLE [dbo].[OrderLines]
    ADD FOREIGN KEY ([PartID]) REFERENCES [dbo].[Parts] ([PartID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[PartInventory]...';


GO
ALTER TABLE [dbo].[PartInventory]
    ADD FOREIGN KEY ([PartID]) REFERENCES [dbo].[Parts] ([PartID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[PartInventory]...';


GO
ALTER TABLE [dbo].[PartInventory]
    ADD FOREIGN KEY ([BinID]) REFERENCES [dbo].[Bins] ([BinID]);


GO
PRINT N'Creating [dbo].[spBins_All]...';


GO
CREATE PROCEDURE [dbo].[spBins_All]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[BinID], 
		[BinName] 
	FROM Bins;

END
GO
PRINT N'Creating [dbo].[spBins_Delete]...';


GO
CREATE PROCEDURE [dbo].[spBins_Delete]
	@BinID int
AS
BEGIN

	SET NOCOUNT ON;

	DELETE FROM dbo.Bins
	WHERE BinID = @BinID;

END
GO
PRINT N'Creating [dbo].[spBins_Insert]...';


GO
CREATE PROCEDURE [dbo].[spBins_Insert]
	@BinName nvarchar(50),
	@BinID int output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO dbo.Bins (BinName)
	VALUES (@BinName);

	SET @BinName = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[spBins_UpdateBin]...';


GO
CREATE PROCEDURE [dbo].[spBins_UpdateBin]
	@BinID int,
	@BinName nvarchar(50)
AS
BEGIN

	SET NOCOUNT ON;

	UPDATE dbo.Bins
	SET 
		BinName = @BinName
	WHERE BinID = @BinID;

END
GO
PRINT N'Creating [dbo].[spInventory_All]...';


GO
CREATE PROCEDURE [dbo].[spInventory_All]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[InventoryID], 
		[PartID], 
		[BinID], 
		[QTY]
	FROM PartInventory;

END
GO
PRINT N'Creating [dbo].[spInventory_GetByBinID]...';


GO
CREATE PROCEDURE [dbo].[spInventory_GetByBinID]
	@BinID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[InventoryID], 
		[PartID], 
		[BinID], 
		[QTY]
	FROM dbo.PartInventory
	WHERE BinID = @BinID;

END
GO
PRINT N'Creating [dbo].[spInventory_GetByPartID]...';


GO
CREATE PROCEDURE [dbo].[spInventory_GetByPartID]
	@PartID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[InventoryID], 
		[PartID], 
		[BinID], 
		[QTY]
	FROM dbo.PartInventory
	WHERE PartID = @PartID;

END
GO
PRINT N'Creating [dbo].[spOrderLines_All]...';


GO
CREATE PROCEDURE [dbo].[spOrderLines_All]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[OrderLineID], 
		[OrderID], 
		[PartID], 
		[QTY], 
		[Price] 
	FROM OrderLines;

END
GO
PRINT N'Creating [dbo].[spOrders_All]...';


GO
CREATE PROCEDURE [dbo].[spOrders_All]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[OrderID], 
		[OrderNumber], 
		[DateOrdered], 
		[CustomerName], 
		[CustomerAddress]
	FROM dbo.Orders;

END
GO
PRINT N'Creating [dbo].[spOrders_GetByID]...';


GO
CREATE PROCEDURE [dbo].[spOrders_GetByID]
	@OrderID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[OrderID], 
		[OrderNumber], 
		[DateOrdered], 
		[CustomerName], 
		[CustomerAddress]
	FROM dbo.Orders
	WHERE OrderID = @OrderID;

END
GO
PRINT N'Creating [dbo].[spParts_All]...';


GO
CREATE PROCEDURE [dbo].[spParts_All]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		PartID, 
		PartName, 
		PartDescription, 
		Price
	FROM dbo.Parts;

END
GO
PRINT N'Creating [dbo].[spParts_Delete]...';


GO
CREATE PROCEDURE [dbo].[spParts_Delete]
	@PartID int
AS
BEGIN

	SET NOCOUNT ON;

	DELETE FROM dbo.Parts
	WHERE PartID = @PartID;

END
GO
PRINT N'Creating [dbo].[spParts_GetByID]...';


GO
CREATE PROCEDURE [dbo].[spParts_GetByID]
	@PartID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 
		[PartID], 
		[PartName], 
		[PartDescription], 
		[Price]
	FROM dbo.Parts
	WHERE PartID = @PartID;

END
GO
PRINT N'Creating [dbo].[spParts_Insert]...';


GO
CREATE PROCEDURE [dbo].[spParts_Insert]
	@PartName nvarchar(50),
	@PartDescription nvarchar(100),
	@Price money = NULL,
	@PartID int output
AS
BEGIN

	SET NOCOUNT ON;

	INSERT INTO dbo.Parts (PartName, PartDescription, Price)
	VALUES (@PartName, @PartDescription, @Price);

	SET @PartID = SCOPE_IDENTITY();

END
GO
PRINT N'Creating [dbo].[spParts_UpdatePart]...';


GO
CREATE PROCEDURE [dbo].[spParts_UpdatePart]
	@PartID int,
	@PartName nvarchar(50),
	@PartDescription nvarchar(100),
	@Price money
AS
BEGIN

	SET NOCOUNT ON;

	UPDATE dbo.Parts
	SET 
		PartName = @PartName,
		PartDescription = @PartDescription,
		Price = @Price
	WHERE PartID = @PartID;

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4063836b-f751-4a30-88a9-3a6a31744189')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4063836b-f751-4a30-88a9-3a6a31744189')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '37e9a178-42a2-491b-a09d-5d72af93c537')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('37e9a178-42a2-491b-a09d-5d72af93c537')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'abfb6777-2b51-42e0-bbf0-9683cf886626')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('abfb6777-2b51-42e0-bbf0-9683cf886626')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '347cdd91-6085-473f-a1ad-05cdad792404')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('347cdd91-6085-473f-a1ad-05cdad792404')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

if not exists (select * from dbo.parts)
begin
    insert into dbo.parts(PartName, PartDescription, Price)
    values ('Test Part 1', 'A part for testing', 19.99),
    ('Test Part 2', 'A second part for testing', 1.99),
    ('Test Part 3', 'A third part for testing', NULL);
end

if not exists (select * from dbo.orders)
begin
    insert into dbo.orders(OrderNumber, DateOrdered, CustomerName, CustomerAddress)
    values ('Test Order 1', '2021-01-01 01:00:00', 'John Doe', '1234 Anywhere St'),
    ('Test Order 2', '2021-01-20 13:30:00', 'Jane Doe', '555 Park Ave Chicago, IL 12345');
end

if not exists (select * from dbo.Bins)
begin
    insert into dbo.bins(BinName)
    values ('Test Bin 1'),
    ('Test Bin 2');
end
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
